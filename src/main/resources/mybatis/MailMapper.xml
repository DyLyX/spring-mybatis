<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cn.dyl.dao.MailDao">
	<resultMap type="Mail" id="baseMailMap">
		
		<id property="id" column="id_mail" />
		<result property="sender" column="sender" />
		<result property="formAddress" column="form_address" />
		<result property="sendAddress" column="send_address" />
		<result property="subject" column="subject" />
		<result property="content" column="content" />
		<result property="createTime" column="createTime" />

	</resultMap>
	
	 <!--这里是关键，一对多映射的“魔法”几乎都在<collection>的配置里。
	 select=...中"test.data.AttachmentMapper"对应于AttachmentMapper中  
            的namespace-->  
    <resultMap type="Mail" id="mailMap" extends="baseMailMap">  
        <collection property="attachments" javaType="ArrayList" ofType="Attachment"   
        select="com.cn.dyl.dao.AddressDao.selectByMailId"/>  
    </resultMap>  
    
     <insert id="insert" parameterType="Mail" useGeneratedKeys="true" keyProperty="id_mail">  
        insert into mail(sender, form_address, send_address, subject, content, createTime)  
        values(#{sender}, #{formAddress}, #{sendAddress}, #{subject}, #{content}, NOW())  
        <!-- 将selectKey放在insert之后，通过LAST_INSERT_ID() 获得刚插入的自动增长的id的值。 -->
        <selectKey keyProperty="id_mail" resultType="int">   
                      select LAST_INSERT_ID()   
        </selectKey>   
    </insert> 
    
    <select id="selectById" parameterType="int" resultMap="mailMap" >  
        select * from mail where id_mail = #{id}  
    </select>  
      
    <select id="selectAllMails" resultMap="mailMap">  
        select * from mail  
    </select> 
    
    <!-- 删除邮件 -->
	<delete id="delete" parameterType="int">
	     DELETE FROM mail WHERE id_mail = #{id}
	</delete>  
	 <!--这里可以获得刚插入表格的id，为后面attachment的插入提供了mailId字段-->  
    <select id="selectLastId" resultType="int">  
         select LAST_INSERT_ID()   
    </select> 
</mapper>